Monu Bhaiya has a board of size M x N consisting of characters and a list of strings words, print all words which are on the board in a sorted order .

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

Input Format
First Line contains 3 space-separated Integers M ,N and K(length of words list) .
Next M Lines contains strings of length N .
Next Line contains a list of words .

Constraints
1 <= N,M <= 12
1 <= word.length <= 104
1 <= word[i].length <= 10

Output Format
print space-separated words which are on the board.

Sample Input
4 4 5
oaan 
etae 
ihkr 
iflv  
oath pea eat rain fifa
Sample Output
eat oath
Explanation
There are only two words "oath" and "eat" from the list which are also in the character board .
Solution:
    
    
    import java.util.*;

public class Main {
public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
int m = sc.nextInt();
int n = sc.nextInt();
int k = sc.nextInt();
    char[][] bo = new char[m][n];
    for (int i = 0; i < m; i++) {
        String str = sc.next();
        for (int j = 0; j < n; j++) {
            bo[i][j] = str.charAt(j);
        }
    }

    Set<String> wordss = new HashSet<>();
    for (int i = 0; i < k; i++) {
        wordss.add(sc.next());
    }

    Set<String> result = new TreeSet<>();
    for (String word : wordss) {
        if (isWord(bo, word)) {
            result.add(word);
        }
    }

    for (String str : result) {
        System.out.print(str + " ");
    }
}

private static boolean isWord(char[][] board, String word) {
    int m = board.length;
    int n = board[0].length;
    boolean[][] v = new boolean[m][n];

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i][j] == word.charAt(0)) {
                if (dfn(board, v, word, i, j, 0)) {
                    return true;
                }
            }
        }
    }

    return false;
}

private static boolean dfn(char[][] board, boolean[][] visited, String word, int i, int j, int index) {
    if (index == word.length()) {
        return true;
    }

    if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j] || board[i][j] != word.charAt(index)) {
        return false;
    }

    visited[i][j] = true;

    boolean found = dfn(board, visited, word, i + 1, j, index + 1) || 
                    dfn(board, visited, word, i - 1, j, index + 1) ||
                    dfn(board, visited, word, i, j + 1, index + 1) || 
                    dfn(board, visited, word, i, j - 1, index + 1);

    visited[i][j] = false;

    return found;
}
}